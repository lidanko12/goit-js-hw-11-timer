{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","days","document","querySelector","hours","minute","seconds","timer","Timer","constructor","selector","targetDate","intervalId","start","timerUpdate","setInterval","currentTime","Date","now","deltaTime","stop","clearInterval","time","Math","floor","pad","mins","secs","textContent","value","String","padStart","myTimer"],"mappings":";AAAA,MAAMA,EAAO,CACDC,KAAOC,SAASC,cAAc,uBAC9BC,MAAQF,SAASC,cAAc,wBAC/BE,OAASH,SAASC,cAAc,uBAChCG,QAAUJ,SAASC,cAAc,uBACjCI,MAAOL,SAASC,cAAc,WAG1C,MAAMK,EACFC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,WAAwBC,EAAa,OAC3CF,KAAAA,SAAWA,EACd,KAAKC,WAAaA,EAClB,KAAKC,WAAaA,EAErBC,QACaC,KAAAA,YAAY,GAEhBF,KAAAA,WAAaG,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKR,WAAaK,EAC/BF,KAAAA,YAAYK,GACbA,GAAa,GACRC,KAAAA,QAIV,KAGPA,OACAC,cAAc,KAAKT,YACdA,KAAAA,WAAa,KAEbE,KAAAA,YAAY,GAIjBA,YAAYQ,GACNrB,MAAAA,EAAOsB,KAAKC,MAAMF,EAAQ,OAC1BlB,EAAQ,KAAKqB,IAAIF,KAAKC,MAAOF,EAAQ,MAAyB,OAC9DI,EAAO,KAAKD,IAAIF,KAAKC,MAAOF,EAAQ,KAAoB,MACxDK,EAAO,KAAKF,IAAIF,KAAKC,MAAOF,EAAQ,IAAc,MACxDtB,EAAKC,KAAK2B,eAAiB3B,IAC3BD,EAAKI,MAAMwB,eAAiBxB,IAC5BJ,EAAKK,OAAOuB,eAAiBF,IAC7B1B,EAAKM,QAAQsB,eAAiBD,IAE/BF,IAAII,GACIC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAInC,MAAMC,EAAU,IAAIxB,EAAM,CAC1BE,SAAU,WACVC,WAAY,IAAIM,KAAK,iBAGvBe,EAAQnB;;ACzDR,aAAA,QAAA","file":"src.9e39da3c.js","sourceRoot":"../src","sourcesContent":["const refs = {\n            days : document.querySelector('[data-value=\"days\"]'),\n            hours : document.querySelector('[data-value=\"hours\"]'),\n            minute : document.querySelector('[data-value=\"mins\"]'),\n            seconds : document.querySelector('[data-value=\"secs\"]'),\n            timer: document.querySelector('.timer'),\n}\n\nclass Timer  {\n    constructor({ selector, targetDate, intervalId = null }) {\n    (this.selector = selector),\n      (this.targetDate = targetDate),\n      (this.intervalId = intervalId);\n  }\n    start() {\n            this.timerUpdate(0);\n    \n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            this.timerUpdate(deltaTime);\n            if (deltaTime <= 0) {\n                this.stop();\n                return;\n            }\n            \n        }, 1000);\n    }\n\n    stop() {\n    clearInterval(this.intervalId);\n    this.intervalId = null;\n   \n    this.timerUpdate(0);\n  }\n\n\n    timerUpdate(time) {   \n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    refs.days.textContent = `${days}`;\n    refs.hours.textContent = `${hours}`;\n    refs.minute.textContent = `${mins}`;\n    refs.seconds.textContent = `${secs}`;  \n  }\n   pad(value) {\n    return String(value).padStart(2, '0'); \n    }\n};\n\n  const myTimer = new Timer({\n  selector: '#timer-1',\n  targetDate: new Date('Sep 30 2021'),\n  });\n\nmyTimer.start();\n  \n","import './js/timer.js';\n\n"]}